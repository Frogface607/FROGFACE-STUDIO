#!/usr/bin/env tsx
/**
 * CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏–≤–∞—Ä–∏—É—Å–æ–º –ª–æ–∫–∞–ª—å–Ω–æ
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   pnpm tsx scripts/archivist-cli.ts add "—Ç–µ–∫—Å—Ç"           - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
 *   pnpm tsx scripts/archivist-cli.ts add-file file.html    - –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª
 *   pnpm tsx scripts/archivist-cli.ts search "–∑–∞–ø—Ä–æ—Å"       - –ø–æ–∏—Å–∫
 *   pnpm tsx scripts/archivist-cli.ts list copywriter       - —Å–ø–∏—Å–æ–∫ –ø–æ namespace
 *   pnpm tsx scripts/archivist-cli.ts stats                 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 */

import * as fs from 'fs/promises'
import * as path from 'path'
import { addToKnowledgeBase, queryKnowledgeBase, getAllFromNamespace } from '../packages/core/knowledge-base/src/index'
import { processFile } from '../packages/agents/archivist/src/file-handlers'
import { callLLM } from '../packages/core/api-client/src/index'

// –ó–∞–≥—Ä—É–∂–∞–µ–º env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–µ—Å–ª–∏ dotenv —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
try {
  const dotenv = require('dotenv')
  dotenv.config({ path: path.join(__dirname, '../.env.local') })
} catch {
  // dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
}

async function classifyContent(content: string): Promise<{ namespace: string; category: string }> {
  const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –∫ –∫–∞–∫–æ–º—É namespace –æ—Ç–Ω–æ—Å–∏—Ç—Å—è:

–î–æ—Å—Ç—É–ø–Ω—ã–µ namespace: copywriter, researcher, smm, psychologist, archivist, global

–ö–æ–Ω—Ç–µ–Ω—Ç:
"""
${content.substring(0, 2000)}
"""

–í–µ—Ä–Ω–∏ JSON:
{
  "namespace": "copywriter|researcher|smm|psychologist|archivist|global",
  "category": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
}`

  try {
    const response = await callLLM(prompt, undefined, 0.3)
    const jsonMatch = response.match(/\{[\s\S]*\}/)
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0])
    }
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error)
  }

  // Fallback
  const lower = content.toLowerCase()
  if (lower.includes('–ø–æ—Å—Ç') || lower.includes('–∞–Ω–æ–Ω—Å')) {
    return { namespace: 'copywriter', category: 'post' }
  }
  if (lower.includes('–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω') || lower.includes('–∞–Ω–∞–ª–∏–∑')) {
    return { namespace: 'researcher', category: 'research' }
  }
  return { namespace: 'global', category: 'general' }
}

async function addText(text: string) {
  console.log('üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç...')
  const classification = await classifyContent(text)
  
  console.log(`‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: ${classification.namespace} - ${classification.category}`)
  
  const id = await addToKnowledgeBase(text, classification.namespace, {
    category: classification.category,
    archivedAt: new Date().toISOString(),
    source: 'cli',
  })
  
  console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ! ID: ${id}`)
  console.log(`üìÅ Namespace: ${classification.namespace}`)
}

async function addFile(filePath: string) {
  console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: ${filePath}`)
  
  const buffer = await fs.readFile(filePath)
  const fileName = path.basename(filePath)
  const content = await processFile(fileName, buffer)
  
  console.log(`üìù –ò–∑–≤–ª–µ—á–µ–Ω–æ ${content.length} —Å–∏–º–≤–æ–ª–æ–≤`)
  
  await addText(content)
}

async function search(query: string, namespace?: string) {
  console.log(`üîç –ü–æ–∏—Å–∫: "${query}"${namespace ? ` –≤ ${namespace}` : ''}`)
  
  const results = await queryKnowledgeBase(query, namespace || 'global', 10)
  
  if (results.length === 0) {
    console.log('‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    return
  }
  
  console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n`)
  results.forEach((result, idx) => {
    console.log(`${idx + 1}. [${result.source || 'unknown'}]`)
    console.log(`   ${result.content.substring(0, 150)}...`)
    console.log(`   Similarity: ${(result.similarity * 100).toFixed(0)}%\n`)
  })
}

async function list(namespace: string) {
  console.log(`üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ namespace "${namespace}":\n`)
  
  const results = getAllFromNamespace(namespace)
  
  if (results.length === 0) {
    console.log('‚ùå –ü—É—Å—Ç–æ')
    return
  }
  
  console.log(`–í—Å–µ–≥–æ: ${results.length} –∑–∞–ø–∏—Å–µ–π\n`)
  results.forEach((result, idx) => {
    console.log(`${idx + 1}. [${result.source || 'unknown'}]`)
    console.log(`   ${result.content.substring(0, 100)}...\n`)
  })
}

async function stats() {
  const namespaces = ['copywriter', 'researcher', 'smm', 'psychologist', 'archivist', 'global']
  
  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n')
  
  for (const ns of namespaces) {
    const results = getAllFromNamespace(ns)
    if (results.length > 0) {
      console.log(`${ns}: ${results.length} –∑–∞–ø–∏—Å–µ–π`)
    }
  }
}

// Main
async function main() {
  const args = process.argv.slice(2)
  const command = args[0]

  switch (command) {
    case 'add':
      if (!args[1]) {
        console.error('‚ùå –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç: archivist-cli.ts add "—Ç–µ–∫—Å—Ç"')
        process.exit(1)
      }
      await addText(args[1])
      break
      
    case 'add-file':
      if (!args[1]) {
        console.error('‚ùå –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: archivist-cli.ts add-file file.html')
        process.exit(1)
      }
      await addFile(args[1])
      break
      
    case 'search':
      if (!args[1]) {
        console.error('‚ùå –£–∫–∞–∂–∏ –∑–∞–ø—Ä–æ—Å: archivist-cli.ts search "–∑–∞–ø—Ä–æ—Å"')
        process.exit(1)
      }
      await search(args[1], args[2])
      break
      
    case 'list':
      await list(args[1] || 'global')
      break
      
    case 'stats':
      await stats()
      break
      
    default:
      console.log(`
üì¶ –ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å CLI

–ö–æ–º–∞–Ω–¥—ã:
  add "—Ç–µ–∫—Å—Ç"            - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
  add-file file.html     - –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª
  search "–∑–∞–ø—Ä–æ—Å"        - –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ
  list [namespace]       - —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é global)
  stats                  - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–ü—Ä–∏–º–µ—Ä—ã:
  pnpm tsx scripts/archivist-cli.ts add "–ú–æ–π —Ç–µ–∫—Å—Ç"
  pnpm tsx scripts/archivist-cli.ts add-file my-file.html
  pnpm tsx scripts/archivist-cli.ts search "–∫–æ–Ω—Ü–µ—Ä—Ç"
  pnpm tsx scripts/archivist-cli.ts list copywriter
  pnpm tsx scripts/archivist-cli.ts stats
`)
  }
}

main().catch(console.error)

