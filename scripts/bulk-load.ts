#!/usr/bin/env tsx
/**
 * –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   pnpm tsx scripts/bulk-load.ts ./knowledge-source/
 */

import * as fs from 'fs/promises'
import * as path from 'path'
import { bulkLoadKnowledge } from '../packages/core/knowledge-base/src/loader'

// –ó–∞–≥—Ä—É–∂–∞–µ–º env (–µ—Å–ª–∏ dotenv —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
try {
  const dotenv = require('dotenv')
  dotenv.config({ path: path.join(__dirname, '../.env.local') })
} catch {
  // dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
}

async function main() {
  const sourceDir = process.argv[2] || './knowledge-source'
  
  console.log(`üöÄ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑: ${sourceDir}\n`)
  
  try {
    const entries = await fs.readdir(sourceDir, { withFileTypes: true })
    
    const sources: Array<{
      type: 'file' | 'directory' | 'json'
      path: string
      namespace: string
      metadata?: Record<string, unknown>
    }> = []
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º namespace –ø–æ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏/—Ñ–∞–π–ª–∞
    for (const entry of entries) {
      const fullPath = path.join(sourceDir, entry.name)
      const name = entry.name.toLowerCase()
      
      let namespace = 'global'
      if (name.includes('copywriter') || name.includes('–∫–æ–ø–∏—Ä–∞–π—Ç') || name.includes('–ø–æ—Å—Ç')) {
        namespace = 'copywriter'
      } else if (name.includes('research') || name.includes('–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω')) {
        namespace = 'researcher'
      } else if (name.includes('smm') || name.includes('—Å–æ—Ü—Å–µ—Ç')) {
        namespace = 'smm'
      }
      
      if (entry.isDirectory()) {
        sources.push({
          type: 'directory',
          path: fullPath,
          namespace,
        })
      } else if (entry.isFile()) {
        const ext = path.extname(entry.name).toLowerCase()
        if (['.txt', '.md'].includes(ext)) {
          sources.push({
            type: 'file',
            path: fullPath,
            namespace,
            metadata: { fileName: entry.name },
          })
        } else if (ext === '.json') {
          sources.push({
            type: 'json',
            path: fullPath,
            namespace,
          })
        }
      }
    }
    
    if (sources.length === 0) {
      console.log('‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      return
    }
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${sources.length} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏\n`)
    
    const results = await bulkLoadKnowledge(sources)
    
    console.log('\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:')
    for (const [namespace, count] of Object.entries(results)) {
      console.log(`   ${namespace}: ${count} —á–∞–Ω–∫–æ–≤`)
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error instanceof Error ? error.message : error)
    process.exit(1)
  }
}

main()

