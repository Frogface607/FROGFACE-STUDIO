import { BaseAgent, Task, AgentResponse } from '@frogface/core-agent-base'
import {
  addToKnowledgeBase,
  loadFromTextFile,
  loadFromJSONFile,
} from '@frogface/core-knowledge-base'
import { processFile } from './file-handlers'
import * as path from 'path'

/**
 * –ê–≥–µ–Ω—Ç-–∞—Ä—Ö–∏–≤–∞—Ä–∏—É—Å
 * 
 * –£–º–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
 * - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ LLM
 * - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫ –∫–∞–∫–æ–º—É namespace –æ—Ç–Ω–æ—Å–∏—Ç—Å—è
 * - –î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Ç–µ–≥–∏
 * - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –≤ RAG
 * - –ú–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã
 */
export class ArchivistAgent extends BaseAgent {
  name = 'archivist'
  description = '–£–º–Ω—ã–π –∞—Ä—Ö–∏–≤–∞—Ä–∏—É—Å: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π'
  knowledgeNamespace = 'archivist'

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ namespace –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
  private availableNamespaces = [
    'copywriter',
    'researcher',
    'smm',
    'psychologist',
    'archivist',
    'global',
  ]

  async execute(task: Task): Promise<AgentResponse> {
    const { prompt, context } = task

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operation = context?.operation as string || 'analyze_and_store'

    switch (operation) {
      case 'analyze_and_store':
        return this.analyzeAndStore(prompt, context)
      
      case 'classify_content':
        return this.classifyContent(prompt, context)
      
      case 'bulk_import':
        return this.bulkImport(context)
      
      case 'file_upload':
        return this.handleFileUpload(context)
      
      default:
        return this.analyzeAndStore(prompt, context)
    }
  }

  getCapabilities(): string[] {
    return [
      'analyze_and_store',
      'classify_content',
      'file_upload',
      'bulk_import',
      'smart_organization',
      'metadata_extraction',
    ]
  }

  /**
   * –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
   */
  private async analyzeAndStore(
    content: string,
    context?: Record<string, unknown>
  ): Promise<AgentResponse> {
    try {
      // –®–∞–≥ 1: –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
      const classification = await this.classifyContentInternal(content)
      
      // –®–∞–≥ 2: –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      const metadata = await this.extractMetadata(content, classification)
      
      // –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π namespace
      const targetNamespace = classification.namespace || 'global'
      
      // –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
      const id = await addToKnowledgeBase(
        content,
        targetNamespace,
        {
          ...metadata,
          archivedBy: 'archivist',
          archivedAt: new Date().toISOString(),
          confidence: classification.confidence,
        }
      )

      // –®–∞–≥ 5: –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ
      const summary = await this.createSummary(content, classification, metadata)

      return {
        result: `‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!

üìÅ Namespace: ${targetNamespace}
üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${classification.category}
üìù –¢–µ–≥–∏: ${metadata.tags?.join(', ') || '–Ω–µ—Ç'}
üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(classification.confidence * 100)}%
üÜî ID: ${id}

${summary}`,
        metadata: {
          id,
          namespace: targetNamespace,
          classification,
          metadata,
        },
      }
    } catch (error) {
      throw new Error(
        `–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: ${error instanceof Error ? error.message : 'Unknown error'}`
      )
    }
  }

  /**
   * –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç (–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å namespace –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é)
   */
  private async classifyContentInternal(content: string): Promise<{
    namespace: string
    category: string
    confidence: number
    reasoning: string
  }> {
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
1. –ö –∫–∞–∫–æ–º—É —Ç–∏–ø—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è (—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –¥–Ω–µ–≤–Ω–∏–∫–æ–≤–∞—è –∑–∞–ø–∏—Å—å, –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ç.–¥.)
2. –ö –∫–∞–∫–æ–º—É namespace –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ª—É—á—à–µ –æ—Ç–Ω–µ—Å—Ç–∏
3. –ö–∞—Ç–µ–≥–æ—Ä–∏—é/—Ç–µ–≥

–î–æ—Å—Ç—É–ø–Ω—ã–µ namespace: ${this.availableNamespaces.join(', ')}

–ö–æ–Ω—Ç–µ–Ω—Ç:
"""
${content.substring(0, 2000)}
"""

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "namespace": "copywriter|researcher|smm|psychologist|archivist|global",
  "category": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
  "confidence": 0.0-1.0,
  "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
}`

    const response = await this.callLLM(prompt, undefined, 0.3)
    
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const jsonMatch = response.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0])
        return {
          namespace: parsed.namespace || 'global',
          category: parsed.category || 'uncategorized',
          confidence: parsed.confidence || 0.5,
          reasoning: parsed.reasoning || '',
        }
      }
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º defaults:', error)
    }

    // Fallback: –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
    return this.fallbackClassification(content)
  }

  /**
   * Fallback –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
   */
  private fallbackClassification(content: string): {
    namespace: string
    category: string
    confidence: number
    reasoning: string
  } {
    const lower = content.toLowerCase()

    if (lower.includes('–ø–æ—Å—Ç') || lower.includes('–∞–Ω–æ–Ω—Å') || lower.includes('—Å–æ—Ü—Å–µ—Ç–∏')) {
      return {
        namespace: 'copywriter',
        category: 'social_media',
        confidence: 0.7,
        reasoning: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: –ø–æ—Å—Ç, –∞–Ω–æ–Ω—Å',
      }
    }

    if (lower.includes('–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω') || lower.includes('–∞–Ω–∞–ª–∏–∑') || lower.includes('—Ç—Ä–µ–Ω–¥')) {
      return {
        namespace: 'researcher',
        category: 'research',
        confidence: 0.7,
        reasoning: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –∞–Ω–∞–ª–∏–∑',
      }
    }

    if (lower.includes('—ç–º–æ—Ü') || lower.includes('—á—É–≤—Å—Ç–≤') || lower.includes('–¥–Ω–µ–≤–Ω–∏–∫')) {
      return {
        namespace: 'psychologist',
        category: 'emotional',
        confidence: 0.7,
        reasoning: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: —ç–º–æ—Ü–∏–∏, –¥–Ω–µ–≤–Ω–∏–∫',
      }
    }

    return {
      namespace: 'global',
      category: 'general',
      confidence: 0.5,
      reasoning: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ global',
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private async extractMetadata(
    content: string,
    classification: { namespace: string; category: string }
  ): Promise<Record<string, unknown>> {
    const prompt = `–ò–∑–≤–ª–µ–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:

–ö–æ–Ω—Ç–µ–Ω—Ç:
"""
${content.substring(0, 1500)}
"""

–ò–∑–≤–ª–µ–∫–∏:
- –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–≥–∏ (5-10 —Å–ª–æ–≤)
- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞
- –î–∞—Ç–∞ (–µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è)
- –õ—é–¥–∏/–ø—Ä–æ–µ–∫—Ç—ã (–µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è)

–í–µ—Ä–Ω–∏ JSON:
{
  "tags": ["—Ç–µ–≥1", "—Ç–µ–≥2"],
  "topic": "–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞",
  "date": "–¥–∞—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å",
  "entities": ["—Å—É—â–Ω–æ—Å—Ç—å1", "—Å—É—â–Ω–æ—Å—Ç—å2"]
}`

    try {
      const response = await this.callLLM(prompt, undefined, 0.3)
      const jsonMatch = response.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0])
        return {
          tags: parsed.tags || [],
          topic: parsed.topic || classification.category,
          date: parsed.date || null,
          entities: parsed.entities || [],
        }
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error)
    }

    return {
      tags: [],
      topic: classification.category,
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private async createSummary(
    content: string,
    classification: { namespace: string; category: string },
    metadata: Record<string, unknown>
  ): Promise<string> {
    return `üìÑ –†–µ–∑—é–º–µ:
${content.length > 200 ? content.substring(0, 200) + '...' : content}

üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${classification.category}
üìå –¢–µ–≥–∏: ${(metadata.tags as string[])?.slice(0, 5).join(', ') || '–Ω–µ—Ç'}`
  }

  /**
   * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  private async classifyContent(
    content: string,
    context?: Record<string, unknown>
  ): Promise<AgentResponse> {
    const classification = await this.classifyContentInternal(content)
    const metadata = await this.extractMetadata(content, classification)

    return {
      result: `–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:

üìÅ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π namespace: ${classification.namespace}
üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${classification.category}
üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(classification.confidence * 100)}%
üí≠ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: ${classification.reasoning}
üìå –¢–µ–≥–∏: ${(metadata.tags as string[])?.join(', ') || '–Ω–µ—Ç'}`,
      metadata: {
        classification,
        metadata,
      },
    }
  }

  /**
   * –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
   */
  private async bulkImport(context?: Record<string, unknown>): Promise<AgentResponse> {
    const items = context?.items as Array<{ content: string; metadata?: Record<string, unknown> }> || []

    if (items.length === 0) {
      return {
        result: '‚ùå –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞',
      }
    }

    const results: Array<{ id: string; namespace: string }> = []

    for (const item of items) {
      try {
        const classification = await this.classifyContentInternal(item.content)
        const id = await addToKnowledgeBase(
          item.content,
          classification.namespace,
          {
            ...item.metadata,
            archivedBy: 'archivist',
            bulkImport: true,
          }
        )
        results.push({ id, namespace: classification.namespace })
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —ç–ª–µ–º–µ–Ω—Ç–∞:', error)
      }
    }

    return {
      result: `‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${results.length} –∏–∑ ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`,
      metadata: { results },
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
   */
  private async handleFileUpload(context?: Record<string, unknown>): Promise<AgentResponse> {
    const filePath = context?.filePath as string
    const content = context?.content as string
    const fileName = context?.fileName as string

    if (!filePath && !content) {
      return {
        result: '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º filePath –∏–ª–∏ content',
      }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å filePath, —á–∏—Ç–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
    let fileContent = content
    if (filePath && !fileContent) {
      try {
        const fs = await import('fs/promises')
        const buffer = await fs.readFile(filePath)
        fileContent = await processFile(fileName || path.basename(filePath), buffer)
      } catch (error) {
        return {
          result: `‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error instanceof Error ? error.message : 'Unknown error'}`,
        }
      }
    } else if (filePath && fileContent) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –ø—É—Ç—å –∏ –∫–æ–Ω—Ç–µ–Ω—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ processFile
      try {
        const buffer = Buffer.from(fileContent, 'utf-8')
        fileContent = await processFile(fileName || path.basename(filePath), buffer)
      } catch {
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      }
    }

    if (!fileContent) {
      return {
        result: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞',
      }
    }

    // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    const classification = await this.classifyContentInternal(fileContent)
    const metadata = await this.extractMetadata(fileContent, classification)

    const id = await addToKnowledgeBase(
      fileContent,
      classification.namespace,
      {
        ...metadata,
        source: filePath || 'upload',
        fileName: fileName || 'unknown',
        archivedBy: 'archivist',
        fileUpload: true,
      }
    )

    return {
      result: `‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω!

üìÅ Namespace: ${classification.namespace}
üìÑ –§–∞–π–ª: ${fileName || filePath || 'upload'}
üÜî ID: ${id}`,
      metadata: {
        id,
        namespace: classification.namespace,
        fileName: fileName || filePath,
      },
    }
  }
}

