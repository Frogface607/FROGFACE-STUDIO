import Fastify from 'fastify'
import cors from '@fastify/cors'
import { agentRegistry } from './registry'
import { registerAllAgents } from './register-agents'
import { seedKnowledgeBase, createKnowledgeStructure } from '../../knowledge-base/src/index'
import { knowledgeRoutes } from './routes/knowledge'
import { uploadRoutes } from './routes/upload'
import type { MCPCommand, MCPResponse, TaskQueueItem } from './types'
import { BaseAgent } from '../../agent-base/src/index'

const fastify = Fastify({
  logger: true,
})

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è CORS
fastify.register(cors, {
  origin: true, // –í production —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
})

// –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
const taskQueue: Map<string, TaskQueueItem> = new Map()

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
 */
async function processCommand(command: MCPCommand): Promise<MCPResponse> {
  try {
    switch (command.type) {
      case 'list_agents': {
        const agents = agentRegistry.list()
        return { success: true, data: agents }
      }

      case 'execute': {
        if (!command.agentId || !command.task) {
          return {
            success: false,
            error: 'agentId –∏ task –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
          }
        }

        const agent = agentRegistry.get(command.agentId)
        if (!agent) {
          return {
            success: false,
            error: `–ê–≥–µ–Ω—Ç "${command.agentId}" –Ω–µ –Ω–∞–π–¥–µ–Ω`,
          }
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥–∏
        const taskItem: TaskQueueItem = {
          id: command.task.id || `task-${Date.now()}`,
          agentId: command.agentId,
          task: command.task,
          status: 'processing',
          createdAt: new Date(),
        }
        taskQueue.set(taskItem.id, taskItem)

        try {
          // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
          const result = await agent.execute(command.task)
          taskItem.status = 'completed'
          taskItem.completedAt = new Date()
          taskItem.result = result

          return {
            success: true,
            agentResponse: result,
            data: { taskId: taskItem.id, status: 'completed' },
          }
        } catch (error) {
          taskItem.status = 'failed'
          taskItem.completedAt = new Date()
          taskItem.error = error instanceof Error ? error.message : 'Unknown error'

          return {
            success: false,
            error: taskItem.error,
            data: { taskId: taskItem.id, status: 'failed' },
          }
        }
      }

      case 'status': {
        const status = {
          agentsCount: agentRegistry.list().length,
          tasksInQueue: taskQueue.size,
          agents: agentRegistry.list(),
        }
        return { success: true, data: status }
      }

      default:
        return {
          success: false,
          error: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã: ${command.type}`,
        }
    }
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
}

// API Routes

/**
 * POST /mcp/command - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
 */
fastify.post<{ Body: MCPCommand }>('/mcp/command', async (request, reply) => {
  const command = request.body
  const response = await processCommand(command)
  return reply.send(response)
})

/**
 * GET /mcp/agents - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
 */
fastify.get('/mcp/agents', async (request, reply) => {
  const agents = agentRegistry.list()
  return reply.send({ success: true, data: agents })
})

/**
 * POST /mcp/agents/:id/task - –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É
 */
fastify.post<{ Params: { id: string }; Body: { task: any } }>(
  '/mcp/agents/:id/task',
  async (request, reply) => {
    const { id } = request.params
    const { task } = request.body

    if (!task) {
      return reply.status(400).send({ success: false, error: 'Task –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' })
    }

    const command: MCPCommand = {
      type: 'execute',
      agentId: id,
      task: {
        id: task.id || `task-${Date.now()}`,
        prompt: task.prompt,
        context: task.context,
        metadata: task.metadata,
      },
    }

    const response = await processCommand(command)
    return reply.send(response)
  }
)

/**
 * GET /mcp/tasks - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
 */
fastify.get('/mcp/tasks', async (request, reply) => {
  const tasks = Array.from(taskQueue.values())
  return reply.send({ success: true, data: tasks })
})

/**
 * GET /mcp/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
 */
fastify.get('/mcp/status', async (request, reply) => {
  const response = await processCommand({ type: 'status' })
  return reply.send(response)
})

/**
 * GET / - Health check
 */
fastify.get('/', async (request, reply) => {
  return reply.send({
    name: 'Frogface Studio MCP Server',
    version: '0.1.0',
    status: 'running',
  })
})

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º routes –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏—è–º–∏
fastify.register(knowledgeRoutes)
fastify.register(uploadRoutes)

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const start = async () => {
  try {
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∑–Ω–∞–Ω–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    try {
      await createKnowledgeStructure('./knowledge')
    } catch (error) {
      console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–Ω–∞–Ω–∏–π:', error)
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è
    try {
      await seedKnowledgeBase()
    } catch (error) {
      console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–Ω–∞–Ω–∏—è:', error)
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
    registerAllAgents()
    
    // Railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT, –Ω–æ –º—ã –º–æ–∂–µ–º —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MCP_PORT
    const port = parseInt(process.env.PORT || process.env.MCP_PORT || '3001', 10)
    const host = process.env.MCP_HOST || '0.0.0.0'

    await fastify.listen({ port, host })
    console.log(`üöÄ MCP Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${host}:${port}`)
    console.log(`üìã –î–æ—Å—Ç—É–ø–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: ${agentRegistry.list().length}`)
  } catch (err) {
    fastify.log.error(err)
    process.exit(1)
  }
}

// Graceful shutdown
process.on('SIGTERM', async () => {
  await fastify.close()
  console.log('üõë MCP Server –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
})

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –Ω–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ)
if (require.main === module) {
  start()
}

export { fastify }

