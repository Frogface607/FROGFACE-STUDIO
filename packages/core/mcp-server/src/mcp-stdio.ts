/**
 * MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ stdio (–¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ChatGPT)
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç MCP –ø—Ä–æ—Ç–æ–∫–æ–ª —á–µ—Ä–µ–∑ stdio transport,
 * —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç ChatGPT –Ω–∞–ø—Ä—è–º—É—é –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ Frogface Studio
 */

import { agentRegistry } from './registry'
import { registerAllAgents } from './register-agents'
import { seedKnowledgeBase, createKnowledgeStructure } from '../../knowledge-base/src/index'

/**
 * MCP Tools (—Ñ—É–Ω–∫—Ü–∏–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ ChatGPT)
 */
const MCP_TOOLS = {
  list_agents: {
    name: 'list_agents',
    description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ Frogface Studio',
    parameters: {
      type: 'object',
      properties: {},
    },
  },
  
  execute_agent_task: {
    name: 'execute_agent_task',
    description: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (copywriter, archivist, researcher –∏ —Ç.–¥.)',
    parameters: {
      type: 'object',
      properties: {
        agent_id: {
          type: 'string',
          description: 'ID –∞–≥–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: copywriter, archivist)',
          enum: ['copywriter', 'archivist'],
        },
        prompt: {
          type: 'string',
          description: '–ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞',
        },
        context: {
          type: 'object',
          description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏',
          additionalProperties: true,
        },
      },
      required: ['agent_id', 'prompt'],
    },
  },

  archive_content: {
    name: 'archive_content',
    description: '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞-–∞—Ä—Ö–∏–≤–∞—Ä–∏—É—Å–∞. –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.',
    parameters: {
      type: 'object',
      properties: {
        content: {
          type: 'string',
          description: '–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏',
        },
        metadata: {
          type: 'object',
          description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ',
          additionalProperties: true,
        },
      },
      required: ['content'],
    },
  },

  search_knowledge: {
    name: 'search_knowledge',
    description: '–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É',
    parameters: {
      type: 'object',
      properties: {
        query: {
          type: 'string',
          description: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å',
        },
        namespace: {
          type: 'string',
          description: 'Namespace –¥–ª—è –ø–æ–∏—Å–∫–∞ (copywriter, researcher, global –∏ —Ç.–¥.)',
        },
        limit: {
          type: 'number',
          description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
          default: 5,
        },
      },
      required: ['query'],
    },
  },
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ MCP –∑–∞–ø—Ä–æ—Å–æ–≤
 */
async function handleMCPRequest(request: any): Promise<any> {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
    if (!agentRegistry.list().length) {
      await initializeServices()
    }

    switch (request.method) {
      case 'tools/list':
        return {
          tools: Object.values(MCP_TOOLS),
        }

      case 'tools/call':
        return await handleToolCall(request.params)

      case 'initialize':
        await initializeServices()
        return {
          protocolVersion: '1.0',
          capabilities: {
            tools: {},
          },
          serverInfo: {
            name: 'frogface-studio',
            version: '0.1.0',
          },
        }

      default:
        throw new Error(`Unknown method: ${request.method}`)
    }
  } catch (error) {
    return {
      error: {
        code: -1,
        message: error instanceof Error ? error.message : 'Unknown error',
      },
    }
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
 */
async function initializeServices() {
  try {
    await createKnowledgeStructure('./knowledge')
  } catch (error) {
    console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–Ω–∞–Ω–∏–π:', error)
  }

  try {
    await seedKnowledgeBase()
  } catch (error) {
    console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–Ω–∞–Ω–∏—è:', error)
  }

  registerAllAgents()
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
 */
async function handleToolCall(params: any): Promise<any> {
  const { name, arguments: args } = params

  switch (name) {
    case 'list_agents': {
      const agents = agentRegistry.list()
      return {
        content: [
          {
            type: 'text',
            text: JSON.stringify(agents, null, 2),
          },
        ],
      }
    }

    case 'execute_agent_task': {
      const { agent_id, prompt, context } = args
      const agent = agentRegistry.get(agent_id)

      if (!agent) {
        throw new Error(`–ê–≥–µ–Ω—Ç "${agent_id}" –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      }

      const task = {
        id: `mcp-${Date.now()}`,
        prompt,
        context: context || {},
      }

      const result = await agent.execute(task)
      
      return {
        content: [
          {
            type: 'text',
            text: result.result,
          },
        ],
        metadata: result.metadata,
      }
    }

    case 'archive_content': {
      const { content, metadata } = args
      const archivist = agentRegistry.get('archivist')

      if (!archivist) {
        throw new Error('–ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
      }

      const task = {
        id: `archive-${Date.now()}`,
        prompt: content,
        context: {
          operation: 'analyze_and_store',
          ...metadata,
        },
      }

      const result = await archivist.execute(task)
      
      return {
        content: [
          {
            type: 'text',
            text: result.result,
          },
        ],
      }
    }

    case 'search_knowledge': {
      const { query, namespace = 'global', limit = 5 } = args
      const { queryKnowledgeBase } = await import('../../knowledge-base/src/index')
      
      const results = await queryKnowledgeBase(query, namespace, limit)
      
      return {
        content: [
          {
            type: 'text',
            text: JSON.stringify(results, null, 2),
          },
        ],
      }
    }

    default:
      throw new Error(`Unknown tool: ${name}`)
  }
}

/**
 * –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ stdio
 */
if (require.main === module) {
  import('readline').then((readlineModule) => {
    const readline = readlineModule.default || readlineModule
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
      terminal: false,
    })

    rl.on('line', async (line: string) => {
      try {
        const request = JSON.parse(line)
        const response = await handleMCPRequest(request)
        
        console.log(JSON.stringify({
          jsonrpc: '2.0',
          id: request.id,
          result: response,
        }))
      } catch (error) {
        const request = (error as any).request || {}
        console.error(JSON.stringify({
          jsonrpc: '2.0',
          id: request.id || null,
          error: {
            code: -1,
            message: error instanceof Error ? error.message : 'Unknown error',
          },
        }))
      }
    })

    console.error('üê∏ Frogface Studio MCP Server (stdio) –∑–∞–ø—É—â–µ–Ω')
  }).catch((error) => {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞:', error)
    process.exit(1)
  })
}

export { handleMCPRequest, MCP_TOOLS }

