/**
 * –°–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∑–Ω–∞–Ω–∏–π (seeder)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
 */

import { bulkLoadKnowledge } from './loader'
import * as path from 'path'
import * as fs from 'fs/promises'

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ seeder'–∞
 */
interface SeederConfig {
  knowledgeDir?: string
  namespaces: {
    [namespace: string]: {
      files?: string[]
      directories?: string[]
      jsonFiles?: string[]
    }
  }
}

const DEFAULT_CONFIG: SeederConfig = {
  knowledgeDir: './knowledge',
  namespaces: {
    copywriter: {
      files: ['examples.txt', 'styles.txt'],
      directories: ['posts'],
    },
    researcher: {
      directories: ['research'],
      jsonFiles: ['notes.json'],
    },
    global: {
      directories: ['general'],
    },
  },
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
export async function seedKnowledgeBase(config: SeederConfig = DEFAULT_CONFIG): Promise<void> {
  const knowledgeDir = config.knowledgeDir || './knowledge'
  const sources: Array<{
    type: 'file' | 'directory' | 'json'
    path: string
    namespace: string
    metadata?: Record<string, unknown>
  }> = []

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  try {
    await fs.access(knowledgeDir)
  } catch {
    console.log(`üìÅ –°–æ–∑–¥–∞—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∑–Ω–∞–Ω–∏–π: ${knowledgeDir}`)
    await fs.mkdir(knowledgeDir, { recursive: true })
  }

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  for (const [namespace, sources_config] of Object.entries(config.namespaces)) {
    const namespaceDir = path.join(knowledgeDir, namespace)

    // –§–∞–π–ª—ã
    if (sources_config.files) {
      for (const file of sources_config.files) {
        const filePath = path.join(namespaceDir, file)
        try {
          await fs.access(filePath)
          sources.push({
            type: 'file',
            path: filePath,
            namespace,
          })
        } catch {
          console.warn(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`)
        }
      }
    }

    // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if (sources_config.directories) {
      for (const dir of sources_config.directories) {
        const dirPath = path.join(namespaceDir, dir)
        try {
          await fs.access(dirPath)
          sources.push({
            type: 'directory',
            path: dirPath,
            namespace,
          })
        } catch {
          console.warn(`‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${dirPath}`)
        }
      }
    }

    // JSON —Ñ–∞–π–ª—ã
    if (sources_config.jsonFiles) {
      for (const jsonFile of sources_config.jsonFiles) {
        const filePath = path.join(namespaceDir, jsonFile)
        try {
          await fs.access(filePath)
          sources.push({
            type: 'json',
            path: filePath,
            namespace,
          })
        } catch {
          console.warn(`‚ö†Ô∏è  JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`)
        }
      }
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞–Ω–∏—è
  if (sources.length > 0) {
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∑–Ω–∞–Ω–∏–π –∏–∑ ${sources.length} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...`)
    const results = await bulkLoadKnowledge(sources)

    console.log('\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞:')
    for (const [namespace, count] of Object.entries(results)) {
      console.log(`   ${namespace}: ${count} —á–∞–Ω–∫–æ–≤`)
    }
  } else {
    console.log('üìù –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ knowledge/')
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∑–Ω–∞–Ω–∏–π
 */
export async function createKnowledgeStructure(baseDir = './knowledge'): Promise<void> {
  const structure = {
    copywriter: ['posts', 'examples', 'styles'],
    researcher: ['research', 'notes'],
    smm: ['strategies', 'analytics'],
    psychologist: ['diary', 'insights'],
    archivist: ['archive', 'index'],
    global: ['general', 'shared'],
  }

  for (const [namespace, subdirs] of Object.entries(structure)) {
    const namespaceDir = path.join(baseDir, namespace)
    await fs.mkdir(namespaceDir, { recursive: true })

    for (const subdir of subdirs) {
      await fs.mkdir(path.join(namespaceDir, subdir), { recursive: true })
    }
  }

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
  await fs.writeFile(
    path.join(baseDir, 'copywriter/examples.txt'),
    `–ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:

1. –ê–Ω–æ–Ω—Å –∫–æ–Ω—Ü–µ—Ä—Ç–∞:
"üî• –í–ù–ò–ú–ê–ù–ò–ï! –ö–æ–Ω—Ü–µ—Ä—Ç Embers –≤ —ç—Ç—É –ø—è—Ç–Ω–∏—Ü—É!
–ö–æ–≥–¥–∞: [–¥–∞—Ç–∞] –≤ [–≤—Ä–µ–º—è]
–ì–¥–µ: [–º–µ—Å—Ç–æ]
–ë–∏–ª–µ—Ç—ã —É–∂–µ –≤ –ø—Ä–æ–¥–∞–∂–µ! –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏! üé∏"

2. –ü–æ—Å—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:
"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 3 –¥–Ω—è –∫–æ–Ω—Ü–µ—Ä—Ç!
–ö—Ç–æ —É–∂–µ –≥–æ—Ç–æ–≤? –ü–æ–¥–Ω–∏–º–∏—Ç–µ —Ä—É–∫–∏ üôã‚Äç‚ôÇÔ∏èüôã‚Äç‚ôÄÔ∏è
–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ! üéµ"
`
  )

  await fs.writeFile(
    path.join(baseDir, 'README.md'),
    `# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π Frogface Studio

–ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –∑–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤.

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞

- \`copywriter/\` - –∑–Ω–∞–Ω–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞ (–ø—Ä–∏–º–µ—Ä—ã –ø–æ—Å—Ç–æ–≤, —Å—Ç–∏–ª–∏)
- \`researcher/\` - –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∑–∞–º–µ—Ç–∫–∏
- \`smm/\` - SMM —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
- \`psychologist/\` - –¥–Ω–µ–≤–Ω–∏–∫–∏ –∏ –∏–Ω—Å–∞–π—Ç—ã
- \`archivist/\` - –∞—Ä—Ö–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
- \`global/\` - –æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è

## –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞–Ω–∏—è

1. –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å —Ñ–∞–π–ª—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
2. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .txt, .md, .json
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ MCP-—Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –≤—ã–∑–æ–≤–∏ —Ñ—É–Ω–∫—Ü–∏—é seedKnowledgeBase()

## –ü—Ä–∏–º–µ—Ä—ã

–°–º. —Ñ–∞–π–ª—ã –≤ –∫–∞–∂–¥–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤.
`
  )

  console.log(`‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–∞ –≤ ${baseDir}`)
  console.log(`üìù –î–æ–±–∞–≤—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏`)
}

