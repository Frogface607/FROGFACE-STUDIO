/**
 * –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è Supabase - –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
 */

export interface SupabaseConfig {
  url: string
  serviceKey: string
  anonKey?: string
}

export interface KnowledgeItem {
  id: string
  content: string
  namespace: string
  embedding?: number[]
  metadata?: Record<string, unknown>
  created_at: string
}

/**
 * Supabase –∫–ª–∏–µ–Ω—Ç –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
 */
export class SupabaseKnowledgeAdapter {
  private supabaseUrl: string
  private serviceKey: string
  private anonKey?: string

  constructor(config: SupabaseConfig) {
    this.supabaseUrl = config.url
    this.serviceKey = config.serviceKey
    this.anonKey = config.anonKey
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤ Supabase (–º–∏–≥—Ä–∞—Ü–∏—è)
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
   */
  async createTables(): Promise<void> {
    // –≠—Ç–æ –±—É–¥–µ—Ç SQL migration —á–µ—Ä–µ–∑ Supabase dashboard –∏–ª–∏ API
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ interface
    console.log('üìã –°–æ–∑–¥–∞–π —Ç–∞–±–ª–∏—Ü—ã –≤ Supabase SQL Editor:')
    console.log(`
CREATE TABLE IF NOT EXISTS knowledge_items (
  id TEXT PRIMARY KEY,
  content TEXT NOT NULL,
  namespace TEXT NOT NULL,
  embedding vector(1536),
  metadata JSONB,
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_namespace ON knowledge_items(namespace);
CREATE INDEX IF NOT EXISTS idx_embedding ON knowledge_items USING ivfflat (embedding vector_cosine_ops);
    `)
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
   */
  async add(
    content: string,
    namespace: string,
    metadata?: Record<string, unknown>,
    embedding?: number[]
  ): Promise<string> {
    const id = `${namespace}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
    const item: KnowledgeItem = {
      id,
      content,
      namespace,
      embedding,
      metadata,
      created_at: new Date().toISOString(),
    }

    const response = await fetch(`${this.supabaseUrl}/rest/v1/knowledge_items`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': this.serviceKey,
        'Authorization': `Bearer ${this.serviceKey}`,
        'Prefer': 'return=representation',
      },
      body: JSON.stringify(item),
    })

    if (!response.ok) {
      throw new Error(`Supabase error: ${response.status} - ${await response.text()}`)
    }

    return id
  }

  /**
   * –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫)
   * TODO: –¥–æ–±–∞–≤–∏—Ç—å vector search –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç pgvector
   */
  async search(
    query: string,
    namespace: string,
    limit = 5
  ): Promise<Array<{ content: string; similarity: number; metadata?: Record<string, unknown> }>> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ URL encoding –¥–ª—è Supabase PostgREST
    const encodedQuery = encodeURIComponent(`%${query}%`)
    const encodedNamespace = encodeURIComponent(namespace)
    
    const response = await fetch(
      `${this.supabaseUrl}/rest/v1/knowledge_items?namespace=eq.${encodedNamespace}&content=ilike.${encodedQuery}&limit=${limit}`,
      {
        headers: {
          'apikey': this.serviceKey,
          'Authorization': `Bearer ${this.serviceKey}`,
        },
      }
    )

    if (!response.ok) {
      const errorText = await response.text()
      throw new Error(`Supabase search error: ${response.status} - ${errorText}`)
    }

      const data = await response.json()
      const items = data as KnowledgeItem[]

    return items.map((item) => ({
      content: item.content,
      similarity: 0.8, // Placeholder, –≤ vector search –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π similarity
      metadata: { ...item.metadata, id: item.id } as Record<string, unknown>,
    }))
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ namespace
   */
  async getAll(namespace: string): Promise<KnowledgeItem[]> {
    const response = await fetch(
      `${this.supabaseUrl}/rest/v1/knowledge_items?namespace=eq.${namespace}`,
      {
        headers: {
          'apikey': this.serviceKey,
          'Authorization': `Bearer ${this.serviceKey}`,
        },
      }
    )

    if (!response.ok) {
      throw new Error(`Supabase get all error: ${response.status}`)
    }

    const data = await response.json()
    return data as KnowledgeItem[]
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
   */
  async remove(id: string): Promise<void> {
    const response = await fetch(
      `${this.supabaseUrl}/rest/v1/knowledge_items?id=eq.${id}`,
      {
        method: 'DELETE',
        headers: {
          'apikey': this.serviceKey,
          'Authorization': `Bearer ${this.serviceKey}`,
        },
      }
    )

    if (!response.ok) {
      throw new Error(`Supabase delete error: ${response.status}`)
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   */
  async ping(): Promise<boolean> {
    try {
      const response = await fetch(
        `${this.supabaseUrl}/rest/v1/knowledge_items?limit=1`,
        {
          headers: {
            'apikey': this.serviceKey,
            'Authorization': `Bearer ${this.serviceKey}`,
          },
        }
      )
      return response.ok
    } catch {
      return false
    }
  }
}

